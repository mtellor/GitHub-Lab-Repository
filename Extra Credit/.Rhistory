install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2025-08-26')
billboard <- tuesdata$billboard
topics <- tuesdata$topics
artist_counts <- billboard %>%
count(artist) %>%
arrange(desc(n)) %>%
slice_max(n, n = 10)  # Top 10 artists
View(topics)
View(billboard)
### View Variables
View(billboard)
### View Variables
names(billboard)
avg_length <- billboard %>%
group_by(date) %>%
summarize(avg_length = mean(length_sec, na.rm = TRUE))
library(tidyverse)
library(lubridate)
billboard <- billboard %>%
mutate(year = year(ymd(date)))
avg_length_by_year <- billboard %>%
group_by(year) %>%
summarize(avg_length_sec = mean(length_sec, na.rm = TRUE)) %>%
arrange(year)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkred", size = 2) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme_minimal()
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkred", size = 2) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#000080", size = 1) +
geom_point(color = "darkred", size = 1.5) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#123460", size = 1) +
geom_point(color = "darkred", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "grey", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "grey", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(minimal)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "grey", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 2),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme_minimal()
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme_minimal()
View(billboard)
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time (1958 - 2025)",
x = "Year",
y = "Average Length (seconds)"
) +
theme_minimal()
ggplot(avg_length_by_year, aes(x = year, y = avg_length_sec)) +
geom_line(color = "#4682B4", size = 1) +
geom_point(color = "black", size = 1.75) +
labs(
title = "Average Song Length Over Time",
x = "Year",
y = "Average Length (seconds)"
) +
theme_minimal()
country_lists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-09/country_lists.csv')
rank_by_year <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-09/rank_by_year.csv')
library(httr)
library(tidyverse)
library(jsonlite)
req <- GET("api.henleypassportindex.com/api/v3/countries")
parsed <- req$content |>
rawToChar() |>
fromJSON()
rank_by_year <- parsed$countries |>
filter(has_data) |>
tidyr::unnest_longer(col = data) |>
select(code, country, region, data, year = data_id) |>
unnest_wider(col = data)
list_to_nested_df <- function(input_list) {
processed_data <- lapply(input_list, function(x) {
if(is.data.frame(x)) {
toJSON(I(list(x)))
} else {
x
}
})
df <- data.frame(processed_data)
return(df)
}
country_lists <- data.frame()
for (i in unique(rank_by_year$code)) {
print(i)
req2 <- GET(paste0("api.henleypassportindex.com/api/v3/visa-single/", i))
parsed2 <- req2$content |>
rawToChar() |>
fromJSON()
add <- list_to_nested_df(parsed2)
country_lists <-  rbind(add, country_lists)
Sys.sleep(2)
}
library(tidyverse)
# Load September ratings
sep <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-23/fide_ratings_september.csv")
# Filter and rank
top_players <- sep %>%
arrange(desc(rating)) %>%
slice_head(n = 20)
# Plot
ggplot(top_players, aes(x = rating, y = fct_reorder(name, rating))) +
geom_point(size = 4, color = "#0072B2") +
geom_text(aes(label = rating), hjust = -0.2, size = 3.5) +
labs(
title = "Top 20 FIDE Players by Elo Rating (Sep 2025)",
x = "Elo Rating",
y = NULL
) +
xlim(0, max(top_players$rating) + 50) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
# Load September ratings
sep <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-23/fide_ratings_september.csv")
# Filter and rank
top_players <- sep %>%
arrange(desc(rating)) %>%
slice_head(n = 20)
# Plot with connecting lines and labels
ggplot(top_players, aes(x = rating, y = fct_reorder(name, rating))) +
geom_segment(aes(x = 0, xend = rating, y = name, yend = name),
color = "gray80", size = 1) +
geom_point(size = 4, color = "#0072B2") +
geom_text(aes(label = rating), hjust = -0.2, size = 3.5) +
labs(
title = "Top 20 FIDE Players by Elo Rating (Sep 2025)",
x = "Elo Rating",
y = NULL
) +
xlim(0, max(top_players$rating) + 50) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
# Plot with connecting lines and labels
ggplot(top_players, aes(x = rating, y = fct_reorder(name, rating))) +
geom_segment(aes(x = 0, xend = rating, y = name, yend = name),
color = "gray80", size = 1) +
geom_point(size = 4, color = "#0072B2") +
geom_text(aes(label = rating), hjust = -0.4, size = 3.5) +
labs(
title = "Top 20 FIDE Players by Elo Rating (Sep 2025)",
x = "Elo Rating",
y = NULL
) +
xlim(0, max(top_players$rating) + 50) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
library(tidyverse)
sep <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-23/fide_ratings_september.csv")
ggplot(sep, aes(x = bday, y = rating)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "lm", se = FALSE, color = "gray30") +
labs(
title = "Age vs. Elo Rating (Sep 2025)",
subtitle = "Younger players show upward momentum",
x = "Year of Birth",
y = "Elo Rating"
) +
theme_minimal()
top_feds <- sep %>%
count(fed) %>%
filter(n > 100) %>%
pull(fed)
sep %>%
filter(fed %in% top_feds) %>%
ggplot(aes(x = fed, y = rating)) +
geom_violin(fill = "#F0E442", alpha = 0.7) +
labs(
title = "Rating Distribution by Federation (Sep 2025)",
x = "Federation",
y = "Elo Rating"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sep %>%
filter(bday >= 2005) %>%
group_by(fed) %>%
summarise(
top_youth_rating = max(rating),
n_youth = n()
) %>%
filter(n_youth >= 5) %>%
ggplot(aes(x = top_youth_rating, y = fct_reorder(fed, top_youth_rating))) +
geom_point(size = 4, color = "#CC79A7") +
labs(
title = "Top Youth Ratings by Federation (Born â‰¥ 2005)",
x = "Top Youth Elo Rating",
y = "Federation"
) +
theme_minimal()
youth_stats <- sep %>%
mutate(is_youth = bday >= 2005) %>%
group_by(fed) %>%
summarise(
avg_rating = mean(rating, na.rm = TRUE),
youth_pct = mean(is_youth, na.rm = TRUE),
n = n()
) %>%
filter(n >= 30)  # Only federations with enough players
ggplot(youth_stats, aes(x = youth_pct, y = avg_rating)) +
geom_point(size = 3, color = "#D55E00") +
geom_smooth(method = "lm", se = FALSE, color = "gray40") +
labs(
title = "Federation Strength vs. Youth Development",
subtitle = "Percent of players born â‰¥ 2005 vs. average rating",
x = "Youth Player Share",
y = "Average Rating"
) +
theme_minimal()
# Join August and September ratings
rating_change <- sep %>%
select(id, name, title, rating) %>%
rename(rating_sep = rating) %>%
left_join(aug %>% select(id, rating) %>% rename(rating_aug = rating), by = "id") %>%
mutate(delta = rating_sep - rating_aug) %>%
filter(title %in% c("GM", "IM", "FM", "CM"))
fide_ratings_september %>%
filter(title %in% c("GM", "IM", "FM", "CM"), bday > 1950) %>%
mutate(age = 2025 - bday) %>%
ggplot(aes(x = title, y = age, fill = title)) +
geom_boxplot() +
labs(
title = "Age Distribution by Title",
x = "Title",
y = "Age"
) +
theme_minimal()
library(tidyverse)
# Load September ratings
sep <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-23/fide_ratings_september.csv")
# Clean and calculate age
sep %>%
filter(title %in% c("GM", "IM", "FM", "CM"), bday > 1950) %>%
mutate(age = 2025 - bday) %>%
ggplot(aes(x = title, y = age, fill = title)) +
geom_boxplot(alpha = 0.8) +
labs(
title = "Age Distribution by Title (Sep 2025)",
x = "Title",
y = "Age"
) +
theme_minimal()
