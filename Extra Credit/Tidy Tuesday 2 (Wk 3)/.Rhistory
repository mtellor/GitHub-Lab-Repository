library(httr)
library(tidyverse)
library(jsonlite)
library(tidyverse)
library(sf)
library(rnaturalearth)
install.packages("maps")  # if you haven't already
library(tidyverse)
library(maps)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
combined <- bind_rows(top_20, bottom_20)
# Get world map data
world_map <- map_data("world")
# Join by country name (some names may need tweaking)
map_df <- world_map %>%
left_join(combined, by = c("region" = "country")) %>%
filter(!is.na(group))  # Keep only top/bottom 20
ggplot(map_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(group = group, fill = visa_free_count), color = "white") +
facet_wrap(~group) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_void()
# Load required packages
library(tidyverse)
library(maps)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
# Combine and fix country names for map matching
combined <- bind_rows(top_20, bottom_20) %>%
mutate(country = case_when(
country == "United States of America" ~ "USA",
country == "South Korea" ~ "Korea, South",
country == "North Korea" ~ "Korea, North",
country == "Russia" ~ "Russian Federation",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Get world map data
world_map <- map_data("world")
# Join by country name
map_df <- world_map %>%
left_join(combined, by = c("region" = "country")) %>%
filter(!is.na(visa_free_count))  # Keep only matched countries
# Plot
ggplot(data = map_df, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = visa_free_count), color = "white") +
facet_wrap(~group) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_void()
# Load required packages
library(tidyverse)
library(maps)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
# Combine and fix country names for map matching
combined <- bind_rows(top_20, bottom_20) %>%
mutate(country = case_when(
country == "United States of America" ~ "USA",
country == "South Korea" ~ "Korea, South",
country == "North Korea" ~ "Korea, North",
country == "Russia" ~ "Russian Federation",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Get world map data
world_map <- map_data("world")
# Join by country name
map_df <- world_map %>%
left_join(combined, by = c("region" = "country")) %>%
filter(!is.na(visa_free_count))  # Keep only matched countries
# Plot
ggplot(data = map_df, aes(x = long, y = lat)) +
geom_polygon(aes(group = group, fill = visa_free_count), color = "white") +
facet_wrap(~group) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_void()
# Load required packages
library(tidyverse)
library(maps)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
# Combine and fix country names for map matching
combined <- bind_rows(top_20, bottom_20) %>%
mutate(country = case_when(
country == "United States of America" ~ "USA",
country == "South Korea" ~ "Korea, South",
country == "North Korea" ~ "Korea, North",
country == "Russia" ~ "Russian Federation",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Get world map data
world_map <- map_data("world")
# Join by country name and preserve group
map_df <- world_map %>%
left_join(combined, by = c("region" = "country")) %>%
filter(!is.na(visa_free_count))  # Keep only matched countries
# Plot
ggplot(data = map_df, aes(x = long, y = lat, group = interaction(region, group))) +
geom_polygon(aes(fill = visa_free_count), color = "white") +
facet_wrap(~group) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_void()
install.packages("rnaturalearth", "rnaturalearthdata")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
library(rnaturalearthdata)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(code, country, visa_free_count)
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
combined <- bind_rows(top_20, bottom_20)
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join by country name
map_data <- world %>%
left_join(combined, by = c("name" = "country")) %>%
filter(!is.na(group))  # Keep only top/bottom 20
ggplot(map_data) +
geom_sf(aes(fill = visa_free_count), color = "white") +
scale_fill_viridis_c(option = "plasma", direction = -1) +
facet_wrap(~group) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_minimal()
# Load required packages
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(code, country, visa_free_count)
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
combined <- bind_rows(top_20, bottom_20)
# Load world map
world_outline <- ne_countries(scale = "medium", returnclass = "sf")
highlighted <- world_outline %>%
left_join(combined, by = c("name" = "country")) %>%
filter(!is.na(group))  # Keep only top/bottom 20
# Plot with base layer
ggplot() +
geom_sf(data = world_outline, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = highlighted, aes(fill = visa_free_count), color = "white", size = 0.3) +  # highlighted countries
scale_fill_viridis_c(option = "plasma", direction = -1) +
facet_wrap(~group) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_minimal()
# Load required packages
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(code, country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
# Combine and fix country names
combined <- bind_rows(top_20, bottom_20) %>%
mutate(country = case_when(
country == "United States of America" ~ "United States",
country == "South Korea" ~ "South Korea",
country == "North Korea" ~ "North Korea",
country == "Russia" ~ "Russia",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join and keep only matched countries
highlighted <- world %>%
left_join(combined, by = c("name" = "country")) %>%
filter(!is.na(group))
# Plot merged map
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = highlighted, aes(fill = visa_free_count), color = "white", size = 0.3) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
subtitle = "Merged map showing visa-free access for both groups",
fill = "Visa-Free Count"
) +
theme_minimal()
s
# Plot merged map
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = highlighted, aes(fill = visa_free_count), color = "white", size = 0.3) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top 20 vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_minimal()
# Load required packages
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(code, country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
# Combine and fix country names
combined <- bind_rows(top_20, bottom_20) %>%
mutate(country = case_when(
country == "United States of America" ~ "United States",
country == "South Korea" ~ "South Korea",
country == "North Korea" ~ "North Korea",
country == "Russia" ~ "Russia",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join and keep only matched countries
highlighted <- world %>%
left_join(combined, by = c("name" = "country")) %>%
filter(!is.na(group))
# Plot with labels
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = highlighted, aes(fill = visa_free_count), color = "white", size = 0.3) +  # highlighted countries
geom_sf_text(data = highlighted, aes(label = name), size = 3, color = "black") +  # country labels
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
subtitle = "Merged map with country labels",
fill = "Visa-Free Count"
) +
theme_minimal()
# Load required packages
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get latest year
latest_year <- max(rank_by_year$year, na.rm = TRUE)
# Filter and rank
rank_latest <- rank_by_year %>%
filter(year == latest_year) %>%
select(code, country, visa_free_count)
# Top and bottom 20
top_20 <- rank_latest %>%
arrange(desc(visa_free_count)) %>%
slice_head(n = 20) %>%
mutate(group = "Top 20")
bottom_20 <- rank_latest %>%
arrange(visa_free_count) %>%
slice_head(n = 20) %>%
mutate(group = "Bottom 20")
# Combine and fix country names
combined <- bind_rows(top_20, bottom_20) %>%
mutate(country = case_when(
country == "United States of America" ~ "United States",
country == "South Korea" ~ "South Korea",
country == "North Korea" ~ "North Korea",
country == "Russia" ~ "Russia",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join and keep only matched countries
highlighted <- world %>%
left_join(combined, by = c("name" = "country")) %>%
filter(!is.na(group))
# Plot merged map
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = highlighted, aes(fill = visa_free_count), color = "white", size = 0.3) +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = paste("Top 20 vs. Bottom 20 Passports by Visa-Free Access in", latest_year),
fill = "Visa-Free Count"
) +
theme_minimal()
# Load packages
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load cuisine data
cuisines <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-16/cuisines.csv')
# Summarize average rating by country
rating_by_country <- cuisines %>%
group_by(country) %>%
summarise(
avg_rating = mean(avg_rating, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10)  # Keep countries with enough recipes
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join map with rating data
map_data <- world %>%
left_join(rating_by_country, by = c("name" = "country")) %>%
filter(!is.na(avg_rating))  # Keep only matched countries
# Plot
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = map_data, aes(fill = avg_rating), color = "white", size = 0.3) +  # colored countries
scale_fill_viridis_c(option = "magma", direction = -1) +
labs(
title = "Average Recipe Rating by Cuisine Country",
subtitle = "Based on Allrecipes data from Tidy Tuesday (2025-09-16)",
fill = "Avg Rating (out of 5)"
) +
theme_minimal()
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load cuisine data
cuisines <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-16/cuisines.csv')
# Summarize average rating by country
rating_by_country <- cuisines %>%
group_by(country) %>%
summarise(
avg_rating = mean(avg_rating, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10)  # Keep countries with enough recipes
# Fix country names to match map data
rating_by_country <- rating_by_country %>%
mutate(country = case_when(
country == "United States of America" ~ "United States",
country == "South Korea" ~ "Korea, South",
country == "North Korea" ~ "Korea, North",
country == "Russia" ~ "Russian Federation",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
))
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join map with rating data
map_data <- world %>%
left_join(rating_by_country, by = c("name" = "country")) %>%
filter(!is.na(avg_rating))  # Keep only matched countries
# Plot with labels
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = map_data, aes(fill = avg_rating), color = "white", size = 0.3) +  # colored countries
geom_sf_text(data = map_data, aes(label = name), size = 3, color = "black") +  # country labels
scale_fill_viridis_c(option = "magma", direction = -1) +
labs(
title = "Average Recipe Rating by Cuisine Country",
subtitle = "Based on Allrecipes data from Tidy Tuesday (2025-09-16)",
fill = "Avg Rating (out of 5)"
) +
theme_minimal()
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Load cuisine data
cuisines <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-16/cuisines.csv')
# Summarize average rating by country
rating_by_country <- cuisines %>%
group_by(country) %>%
summarise(
avg_rating = mean(avg_rating, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10)  # Only countries with enough recipes
# Fix country names to match map data
rating_by_country <- rating_by_country %>%
mutate(country = case_when(
country == "United States of America" ~ "United States",
country == "South Korea" ~ "Korea, South",
country == "North Korea" ~ "Korea, North",
country == "Russia" ~ "Russian Federation",
country == "Czechia" ~ "Czech Republic",
country == "Vietnam" ~ "Viet Nam",
country == "Iran" ~ "Iran (Islamic Republic of)",
TRUE ~ country
))
# Load world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Join map with rating data
map_data <- world %>%
left_join(rating_by_country, by = c("name" = "country")) %>%
filter(!is.na(avg_rating))  # Keep only matched countries
# Plot
ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray80", size = 0.2) +  # base map
geom_sf(data = map_data, aes(fill = avg_rating), color = "white", size = 0.3) +  # colored countries
scale_fill_viridis_c(option = "magma", direction = -1) +
labs(
title = "Average Recipe Rating by Cuisine Country",
subtitle = "Based on Allrecipes data from Tidy Tuesday (2025-09-16)",
fill = "Avg Rating (out of 5)"
) +
theme_minimal()
