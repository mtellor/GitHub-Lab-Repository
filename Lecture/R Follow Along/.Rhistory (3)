met <- read.csv("~/Library/CloudStorage/GoogleDrive-tellorin@usc.edu/.shortcut-targets-by-id/10yI1Vp2x44iBX7T-_NfWNeL7go8kwnUH/2. College - USC/1. Degree/1. Courses/Y4 Senior/Fall 2025/PM 566/Lab/Lab 3/data/met_all.gz")
met <- met[met$temp > -10, ]
met$elev[met$elev == 9999.0] <- NA
library(dplyr)
met_avg <- summarize(met,
temp =     mean(temp, na.rm = TRUE),
rh =       mean(rh, na.rm = TRUE),
wind.sp =  mean(wind.sp, na.rm = TRUE),
vis.dist = mean(vis.dist, na.rm = TRUE),
lat =      mean(lat, na.rm = TRUE),
lon =      mean(lon, na.rm = TRUE),
elev =     mean(elev, na.rm = TRUE),
.by = c(USAFID, day))
met_avg$region <- ifelse(met_avg$lon > -98, "east", "west")
met_avg$elev_cat <- ifelse(met_avg$elev > 252, "high", "low")
met_avg$vis_cat <- cut(met_avg$vis.dist,
breaks = c(0, 1000, 6000, 10000, Inf),
labels = c("fog", "mist", "haze", "clear"),
right = FALSE)
# Basic Sctrplt
plot(met_avg$temp, met_avg$rh)
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh))
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh))
ggplot2(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh))
## GGPlot
library(ggplot2)
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh))
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh, color = region))
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh, alpha = 0.3))
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh, alpha = 0))
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh, alpha = 0.3))
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh, shape = region))
# Manual control of aesthetics - color
ggplot(data = met_avg) +
geom_point(mapping = aes(x = temp, y = rh), color = "navy")
plot(1:10, pch = 16)
points(10:1, pch = 16, col = 2)
met_avg[!is.na(met_avg$region), ] |>
ggplot() +
geom_point(mapping = aes(x = temp, y = rh, color=region)) +
facet_wrap(~ region, nrow = 1)
met_avg[!is.na(met_avg$region) & !is.na(met_avg$elev_cat), ] %>%
ggplot() +
geom_point(mapping = aes(x = temp, y = rh)) +
facet_grid(region ~ elev_cat)
met_avg[!is.na(met_avg$region) & !is.na(met_avg$elev_cat), ] |>
ggplot() +
geom_point(mapping = aes(x = temp, y = rh)) +
facet_grid(region ~ elev_cat)
layout(matrix(1:2, nrow=1))
plot(met_avg$temp[which(met_avg$region == 'east')], met_avg$rh[which(met_avg$region == 'east')], pch = 16, col = 2)
plot(met_avg$temp[which(met_avg$region == 'west')], met_avg$rh[which(met_avg$region == 'west')], pch = 16, col = 4)
library(cowplot)
# Geometric objects
## 1
install.packages(cowplot)
install.packages("cowplot")
library(cowplot)
scatterplot <- ggplot(data = met_avg) + geom_point(mapping = aes(x = temp, y = rh))
lineplot    <- ggplot(data = met_avg) + geom_smooth(mapping = aes(x = temp, y = rh))
plot_grid(scatterplot, lineplot, labels = "AUTO")
lineplot    <- ggplot(data = met_avg) + geom_smooth(mapping = aes(x = temp, y = rh)) + y = 100
scatterplot_line <- ggplot(data = met_avg) + geom_point(mapping = aes(x = temp, y = rh)) + geom_smooth(mapping = aes(x = temp, y = rh))
ggplot(data = met_avg) +
geom_smooth(mapping = aes(x = temp, y = rh, linetype = region))
hist(met_avg$temp)
ggplot(met_avg) +
geom_histogram(mapping = aes(x = temp))
# Lineplots
## R base
plot(met_avg$day[met_avg$elev==4113], met_avg$temp[met_avg$elev==4113], type = 'l')
# Lineplots
## R base
plot(met_avg$day[met_avg$elev==4113], met_avg$temp[met_avg$elev==4113], type = 'l')
plot(1:10, pch = 16)
lines(10:1, col = 2, lwd = 3) # add a thick red line
ggplot(data = met_avg[met_avg$elev==4113, ])+
geom_line(mapping=aes(x=day, y=temp))
world_map <- map_data("world")
world_map <- map_data("world")
ggplot(data = world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "darkgray", color = "white")
View(world_map)
world_map <- map_data("world")
ggplot(data = world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "darkgreen", color = "skyblue")
world_map <- map_data("world")
ggplot(data = world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "darkgray", color = "white")
us_map <- map_data("state")
ggplot(data = us_map, aes(x = long, y = lat, fill = region)) +
geom_polygon(color = "white")
met_avg[!is.na(met_avg$region), ] %>%
ggplot() +
geom_point(mapping = aes(x = temp, y = rh, color = region))+
geom_smooth(mapping = aes(x = temp, y = rh, linetype = region))
met_avg[!is.na(met_avg$region), ] %>%
ggplot(mapping = aes(x = temp, y = rh, color=region, linetype=region)) +
geom_point() +
geom_smooth()
met_avg[!is.na(met_avg$region), ] %>%
ggplot(mapping = aes(x = temp, y = rh, color = region, linetype = region)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, col = "black")
met_avg[!is.na(met_avg$region), ] %>%
ggplot(mapping = aes(x = temp, y = rh)) +
geom_point(mapping = aes(color = region)) +
geom_smooth()
## 3
met_avg[!is.na(met_avg$region), ] %>%
ggplot(mapping = aes(x = temp, y = rh)) +
geom_point(mapping = aes(color = region)) +
geom_smooth(se = FALSE)
met_avg[!is.na(met_avg$vis_cat), ] %>%
ggplot(mapping = aes(x = temp, y = rh, alpha = 0.5)) +
geom_point(mapping = aes(color = vis_cat)) +
geom_smooth(se = FALSE)
tab <- table(met_avg$vis_cat)
barplot(tab)
barplot(table(met_avg$vis_cat))
met_avg %>%
filter(!is.na(met_avg$vis_cat)) %>%
ggplot() +
geom_bar(mapping = aes(x = vis_cat))
met_avg[!is.na(met_avg$vis_cat), ] %>%
ggplot() +
geom_bar(mapping = aes(x = vis_cat, y = stat(prop), group = 1))
met_avg[!is.na(met_avg$vis_cat), ] %>%
ggplot() +
geom_bar(mapping = aes(x = vis_cat, color = vis_cat, fill=vis_cat))
met_avg[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear", ] %>%
ggplot() +
geom_bar(mapping = aes(x = vis_cat, fill = region))+
scale_fill_viridis_d()
tab <- table(met_avg$region[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear"],
met_avg$vis_cat[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear"])
barplot(tab, col = c(2,4))
tab <- table(met_avg$region[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear"],
met_avg$vis_cat[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear"])
barplot(tab, col = c(2,4))
met_avg[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear", ] %>%
ggplot() +
geom_bar(mapping = aes(x = elev_cat, fill = vis_cat), position = "dodge")
l <- met_avg[!is.na(met_avg$vis_cat) & met_avg$vis_cat != "clear", ] %>%
ggplot() +
stat_summary(mapping = aes(x = vis_cat, y = temp),
fun.min = min,
fun.max = max,
fun = median)
l
# Box plots
## R Base
boxplot(met_avg$temp ~ met_avg$elev_cat)
met_avg[!is.na(met_avg$elev_cat), ] %>%
ggplot()+
geom_boxplot(mapping=aes(x=elev_cat, y=temp, fill=elev_cat))
nojitter <- ggplot(data = met_avg[1:1000,]) +
geom_point(mapping = aes(x = vis_cat, y = temp))
jitter <- ggplot(data = met_avg[1:1000,]) +
geom_point(mapping = aes(x = vis_cat, y = temp), position = "jitter")
plot_grid(nojitter, jitter, labels = "AUTO")
unflipped <- ggplot(data = met_avg) +
geom_boxplot(mapping = aes(x = vis_cat, y = temp))
flipped <- ggplot(data = met_avg) +
geom_boxplot(mapping = aes(x = vis_cat, y = temp)) +
coord_flip()
plot_grid(unflipped, flipped, labels = "AUTO")
bar <- ggplot(data = met_avg) +
geom_bar(mapping = aes(x = elev_cat, fill = elev_cat), show.legend = FALSE, width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data") +
labs(x = expression("Temperature" *~ degree * C), y = "Relative Humidity")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data") +
labs(x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
theme_bw(base_family = "Times")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data") +
labs(x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
theme_bw(base_family = "Calibri")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data") +
labs(x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
theme_bw(base_family = "Times")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data") +
labs(x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
theme_ceruluean(base_family = "Times")
1+1
1+1
2+2
3*1
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data",x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
scale_color_manual(name="Region", labels=c("East", "West"), values=c("east"="lightblue", "west"="purple"))+
theme_bw(base_family = "Times")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data",x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
scale_color_manual(name="Region", labels=c("East", "West"), values=c("east"="navy", "west"="darkred"))+
theme_bw(base_family = "Times")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data",x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
scale_color_manual(name="Region", labels=c("East", "West"), values=c("east"="lightyellow", "west"="darkred"))+
theme_bw(base_family = "Times")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data",x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
scale_color_manual(name="Region", labels=c("East", "West"), values=c("east"="yellow4", "west"="darkred"))+
theme_bw(base_family = "Times")
ggplot(met_avg[!is.na(met_avg$region), ]) +
geom_point(aes(temp, rh, color = region)) +
labs(title = "Weather Station Data",x = expression("Temperature"*~degree*C), y = "Relative Humidity")+
scale_color_manual(name="Region", labels=c("East", "West"), values=c("east"="yellow3", "west"="darkred"))+
theme_bw(base_family = "Times")
ggplot(data = met_avg) +
geom_point(mapping=aes(x=temp, y=rh, color=elev))
ggplot(data = met_avg) +
geom_point(mapping=aes(x=temp, y=rh, color=elev))+
scale_color_gradient(low="blue", high="red")
ggplot(data=met_avg) +
geom_point(mapping= aes(x=temp, y=rh, color = cut(elev, b=5))) +
scale_color_manual(values = viridis::viridis(6))
install.packages("viridis")
library(viridis)
library(viridis)
ggplot(data=met_avg) +
geom_point(mapping= aes(x=temp, y=rh, color = cut(elev, b=5))) +
scale_color_manual(values = viridis::viridis(6))
View(scatterplot)
library(leaflet)
met_avg2 <- summarize(met,
temp =     mean(temp, na.rm = TRUE),
lat =      mean(lat, na.rm = TRUE),
lon =      mean(lon, na.rm = TRUE),
.by = c(USAFID))
met_avg2 <- met_avg2[!is.na(met_avg2$temp), ]
# Generating a color palette
temp.pal <- colorNumeric(c('darkgreen','goldenrod','brown'), domain=met_avg2$temp)
temp.pal(20)
temp.pal
tempmap <- leaflet(met_avg2) %>%
# The looks of the Map
addProviderTiles('CartoDB.Positron') %>%
# Some circles
addCircles(
lat = ~lat, lng=~lon,
# HERE IS OUR PAL!
label = ~paste0(round(temp,2), ' C'), color = ~ temp.pal(temp),
opacity = 1, fillOpacity = 1, radius = 500
) %>%
# And a pretty legend
addLegend('bottomleft', pal=temp.pal, values=met_avg2$temp,
title='Temperature, C', opacity=1)
tempmap
map_data("world")
library(map_data)
library('map_data')
world_map <- map_data("world")
library(maps)
map_data("world")
maps("world")
maps::us.cities
str(maps)
?maps
data(usaMapEnv)
map('usa')
map('california')
map('CA')
map('canada')
map('brentwood')
install.packages("mapdata")
map("state", "New Jersey")
library(map.cities)
library(ggplot2)
world_map <- map_data("world")
geom_polygon(data = world_map, aes(x = 34.00001, y = 118.15599, group = group), fill = "lightgray", color = "white") +
geom_sf(data = my_sf, aes(color = value), size = 3)
geom_polygon(data = world_map, aes(x = 34.00001, y = 118.15599, group = group), fill = "lightgray", color = "white")
geom_polygon(data = world_map, aes(x = 34.00001, y = 118.15599, group = group), fill = "lightgray", color = "white")
View(world_map)
ggplot(data = world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "darkgray", color = "white")
library(leaflet)
var map = L.map('map', {
leaflet::varmap
library(data.table)
library(dtplyr)
library(dplyr)
library(ggplot2)
## Loading data
# Where are we getting the data from
met_url <- "https://github.com/USCbiostats/data-science-data/raw/master/02_met/met_all.gz"
# Downloading the data to a tempfile (so it is destroyed afterwards)
# you can replace this with, for example, your own data:
tmp <- tempfile(pattern = "met", fileext = ".gz")
if (!file.exists(tmp)) {
download.file(
url      = met_url,
destfile = tmp,
# method   = "libcurl", timeout = 1000 (you may need this option)
)
}
# Reading the data
dat <- read.csv(tmp)
head(dat)
# Selecting columns
dat[, c('USAFID', 'lat', 'lon')]
dat <- dat |>
select(USAFID, WBAN, year, month, day,
hour, min, lat, lon, elev,
wind.sp, temp, atm.press)
myxor <- function(x, y) {
res <- logical(length(x))
for (i in 1:length(x)) {
res[i] <- # do something with x[i] and y[i]
}
myxor1 <- function(x,y) {(x & !y) | (!x & y)}
myxor2 <- function(x,y) {!((!x | y) & (x | !y))}
myxor3 <- function(x,y) {(x | y) & (!x | !y)}
myxor4 <- function(x,y) {!((!x & !y) | (x & y))}
cbind(
ifelse(xor(test[,1], test[,2]), "true", "false"),
ifelse(myxor1(test[,1], test[,2]), "true", "false"),
ifelse(myxor2(test[,1], test[,2]), "true", "false"),
ifelse(myxor3(test[,1], test[,2]), "true", "false"),
ifelse(myxor4(test[,1], test[,2]), "true", "false")
)
dat[dat$day == 1 &
dat$lat > 40 &
((dat$elev < 500) | (dat$elev > 1000)), ]
dat[dat$day == 1 &
dat$lat > 40 &
(dat$elev < 500 | dat$elev > 1000), ]
tail(dat)
dat |>
filter(day == 1, lat > 40, (elev < 500) | (elev > 1000)) |>
collect() |> # Notice this line!
nrow()
# Q2.1: Records w/ temp 18-25
nrow(dat[dat$temp < 25 & dat$temp > 18, ])
# Q2.2: Missing values
nrow(dat[is.na(dat$temp), ])
set.seed(123)
idx1 <- sample(which(is.na(dat$temp)), 1000)
idx2 <- sample(which(!is.na(dat$temp)), 1000)
ggplot(map_data("state"), aes(x = long, y = lat)) +
geom_map(aes(map_id = region), map = map_data("state"), col = "lightgrey", fill = "gray") +
geom_jitter(
data    = dat[c(idx1, idx2), ],
mapping = aes(x = lon, y = lat, col = is.na(temp)),
inherit.aes = FALSE, alpha = .5, cex = 2
)
